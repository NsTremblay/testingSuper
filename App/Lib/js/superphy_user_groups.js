// Generated by CoffeeScript 1.9.0

/*


 File: superphy_user_groups.coffee
 Desc: Objects & functions for managing user created groups in Superphy
 Author: Akiff Manji akiff.manji@gmail.com
 Date: Sept 8th, 2014
 */

(function() {
  var SuperphyError, UserGroups, root,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  root = typeof exports !== "undefined" && exports !== null ? exports : this;


  /*
   CLASS SuperphyError
   
   Error object for this library
   */

  SuperphyError = (function(_super) {
    __extends(SuperphyError, _super);

    function SuperphyError(_at_message, _at_name) {
      this.message = _at_message != null ? _at_message : '';
      this.name = _at_name != null ? _at_name : 'Superphy Error';
    }

    return SuperphyError;

  })(Error);

  UserGroups = (function() {
    function UserGroups(_at_userGroupsObj, _at_parentElem, _at_viewController) {
      this.userGroupsObj = _at_userGroupsObj;
      this.parentElem = _at_parentElem;
      this.viewController = _at_viewController;
      this._updateSelections = __bind(this._updateSelections, this);
      if (!this.userGroupsObj) {
        throw new SuperphyError('User groups object cannot be empty/null.');
      }
      if (!this.parentElem) {
        throw new SuperphyError('Parent div not specified.');
      }
      if (!this.viewController) {
        throw new SuperphyError('ViewController object is required');
      }
      this.user_group_collections = {
        group_collections: {}
      };
      this.appendGroupForm(this.userGroupsObj);
      this.processUserGroups(this.userGroupsObj);
    }

    UserGroups.prototype.appendGroupForm = function(uGpObj) {
      var container, create_group, create_group_button, create_group_input, create_group_row, group_select, header, load_groups_button, load_save_groups, load_save_groups_row, save_groups_button, select, user_groups_form;
      if (uGpObj.status) {
        return this.parentElem.append('<div class="alert alert-info" role="alert">' + uGpObj.status + '</div>');
      } else {
        header = jQuery('<div class="panel-heading">' + '<div class="panel-title">' + '<a data-toggle="collapse" href="#user-groups-form"><i class="fa fa-filter"></i> User Groups ' + '<span class="caret"></span></a>' + '</div></div>').appendTo(this.parentElem);
      }
      container = jQuery('<div id="user-groups-form" class="panel-collapse collapse in"></div>');
      user_groups_form = jQuery('<form class="form"></form>').appendTo(container);
      create_group = jQuery('<div class="form-group"></div>').appendTo(user_groups_form);
      create_group_row = jQuery('<div class="row"></div>').appendTo(create_group);
      create_group_button = jQuery('<div class="col-xs-5"><button class="btn btn-default btn-sm">Create Group</button></div>').appendTo(create_group_row);
      create_group_input = jQuery('<div class="col-xs-7"><input class="form-control input-sm" type="text" placeholder="Group Name"></div>').appendTo(create_group_row);
      group_select = jQuery('<div class="control-group"></div>').appendTo(user_groups_form);
      select = jQuery("<select multiple id='user_group_collections' class='form-control' placeholder='Select group(s)...'></select>").appendTo(group_select);
      load_save_groups = jQuery('<div class="form-group"></div>').appendTo(user_groups_form);
      load_save_groups_row = jQuery('<div class="row"></div>').appendTo(load_save_groups);
      load_groups_button = jQuery('<div class="col-xs-3"><button class="btn btn-default btn-sm">Load</button></div>').appendTo(load_save_groups_row);
      save_groups_button = jQuery('<div class="col-xs-3"><button class="btn btn-default btn-sm">Save</button></div>').appendTo(load_save_groups_row);
      container.appendTo(this.parentElem);
      return true;
    };

    UserGroups.prototype.processUserGroups = function(uGpObj) {
      var $selectized_group_select, group, group_collection, group_collection_index, user_groups_select_optgroups, user_groups_select_options, _i, _len, _ref, _ref1;
      user_groups_select_optgroups = [];
      user_groups_select_options = [];
      _ref = uGpObj.standard;
      for (group_collection in _ref) {
        group_collection_index = _ref[group_collection];
        user_groups_select_optgroups.push({
          value: group_collection_index.name,
          label: group_collection_index.name,
          count: group_collection_index.children.length
        });
        _ref1 = group_collection_index.children;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          group = _ref1[_i];
          user_groups_select_options.push({
            "class": group_collection_index.name,
            value: group.name,
            name: group.name,
            id: group.id
          });
        }
      }
      console.log(user_groups_select_options);
      return $selectized_group_select = $('#user_group_collections').selectize({
        delimiter: ',',
        persist: false,
        options: user_groups_select_options,
        optgroups: user_groups_select_optgroups,
        optgroupField: 'class',
        labelField: 'name',
        searchField: ['name'],
        render: {
          optgroup_header: (function(_this) {
            return function(data, escape) {
              return "<div class='optgroup-header'>" + data.label + " - <span>" + data.count + "</span></div> ";
            };
          })(this),
          option: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.value + "</div>";
            };
          })(this),
          item: (function(_this) {
            return function(data, escape) {
              return "<div>" + data.value + "</div>";
            };
          })(this)
        },
        create: true
      });

      /*		group_collections_select_options = []
      		for collection_name, collection_array of uGpObj when collection_name isnt 'genome_id'
      			group_collections_select_options.push({value: "#{collection_name}", name: "#{collection_name}"})
      			@user_group_collections.group_collections[collection_name] = {}
      			@user_group_collections.group_collections[collection_name]['Ungrouped'] = []
      			for group_name, index in collection_array
      				@user_group_collections.group_collections[collection_name][group_name] = [] unless @user_group_collections.group_collections[collection_name][group_name] or group_name is null
      				@user_group_collections.group_collections[collection_name][group_name].push(uGpObj.genome_id[index]) unless group_name is null
      				@user_group_collections.group_collections[collection_name]['Ungrouped'].push(uGpObj.genome_id[index]) if group_name is null
      			delete @user_group_collections.group_collections[collection_name]['Ungrouped'] unless @user_group_collections.group_collections[collection_name]['Ungrouped'].length
      		
      		$select_group_collection = @group_collections_select.selectize({
      				onChange: (value) =>
      					@select_group.disable()
      					@select_group.clearOptions()
      					return if not value.length
      					true
      					@select_group.load( (callback) =>
      						@select_group.enable()
      						groups_results = []
      						groups_results.push({name: k, value: k}) for k, v of @user_group_collections.group_collections[value]
      						callback(groups_results);
      						)
      				searchField: ['name']
      				options: group_collections_select_options
      				render: {
            			option: (data, escape) =>
              				return "<div class='option'>#{data.name}</div>"
            			item: (data, escape) =>
              				return "<div class='item'>#{data.name}</div>"
          			}
      			})
      
      
      		$select_group = @group_collections_group_select.selectize({
      			onChange: (value) =>
      				return @_updateSelections(value)
      			valueField: 'value'
      			labelField: 'name'
      			searchField: ['name']
      			})
      
      		@select_group_collection = $select_group_collection[0].selectize
      		@select_group = $select_group[0].selectize
      
      		@select_group.disable();
      
      		true
       */
    };

    UserGroups.prototype._updateSelections = function(group_name) {
      var collection_name, genome_id, group_genomes, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
      collection_name = this.select_group_collection.getValue();
      _ref = Object.keys(viewController.genomeController.public_genomes);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        genome_id = _ref[_i];
        this.viewController.select(genome_id, false);
      }
      _ref1 = Object.keys(viewController.genomeController.private_genomes);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        genome_id = _ref1[_j];
        this.viewController.select(genome_id, false);
      }
      if (group_name === "") {

      } else {
        group_genomes = this.user_group_collections.group_collections[collection_name][group_name];
        for (_k = 0, _len2 = group_genomes.length; _k < _len2; _k++) {
          genome_id = group_genomes[_k];
          if (__indexOf.call(viewController.genomeController.pubVisible, genome_id) >= 0) {
            this.viewController.select(genome_id, true);
          }
        }
        for (_l = 0, _len3 = group_genomes.length; _l < _len3; _l++) {
          genome_id = group_genomes[_l];
          if (__indexOf.call(viewController.genomeController.pvtVisible, genome_id) >= 0) {
            this.viewController.select(genome_id, true);
          }
        }
      }
      return true;
    };

    return UserGroups;

  })();

  if (!root.UserGroups) {
    root.UserGroups = UserGroups;
  }

}).call(this);
