// Generated by CoffeeScript 1.7.1

/*

 File: superphy_map.coffee
 Desc: Objects & functions for managing geospatial views in Superphy
 Author: Akiff Manji akiff.manji@gmail.com
 Date: May 6, 2014
 */
var Cartographer, DotCartographer, MapView,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

MapView = (function(_super) {
  __extends(MapView, _super);

  function MapView(parentElem, style, elNum, mapArgs) {
    this.parentElem = parentElem;
    this.style = style;
    this.elNum = elNum;
    MapView.__super__.constructor.call(this, this.parentElem, this.style, this.elNum);
  }

  MapView.prototype.type = 'map';

  MapView.prototype.elName = 'genome_map';

  MapView.prototype.update = function(genomes) {
    var ft, mapElem, t1, t2;
    mapElem = jQuery("#" + this.elID);
    if (mapElem.length) {
      mapElem.empty();
    } else {
      mapElem = jQuery("<ul id='" + this.elID + "' />");
      jQuery(this.parentElem).find('.map-manifest').append(mapElem);
    }
    t1 = new Date();
    this._appendGenomes(mapElem, genomes.pubVisible, genomes.public_genomes, this.style, false);
    this._appendGenomes(mapElem, genomes.pvtVisible, genomes.private_genomes, this.style, true);
    t2 = new Date();
    ft = t2 - t1;
    console.log('List view elapsed time: ' + ft);
    return true;
  };

  MapView.prototype._appendGenomes = function(el, visibleG, genomes, style, priv) {
    var actionEl, checked, cls, g, labEl, mapEl, name, thiscls, _i, _len;
    cls = this.cssClass();
    if (priv && visibleG.length) {
      el.append("<li class='genome_list_spacer'>---- USER-SUBMITTED GENOMES ----</li>");
    }
    for (_i = 0, _len = visibleG.length; _i < _len; _i++) {
      g = visibleG[_i];
      thiscls = cls;
      if (genomes[g].cssClass != null) {
        thiscls = cls + ' ' + genomes[g].cssClass;
      }
      name = genomes[g].htmlname;
      if (style = 'redirect') {
        mapEl = jQuery("<li class='" + thiscls + "'>" + name + "</li>");
        actionEl = jQuery("<a href='#' data-genome='" + g + "'><span class='fa fa-search'></span> info</a>");
        actionEl.click(function(e) {
          var gid;
          e.preventDefault();
          gid = this.dataset.genome;
          return viewController.select(gid, true);
        });
        mapEl.append(actionEl);
        el.append(mapEl);
      } else if (style === 'select') {
        checked = '';
        if (genomes[g].isSelected) {
          checked = 'checked';
        }
        mapEl = jQuery("<li class='" + thiscls + "'></li>");
        labEl = jQuery("<label class='checkbox'>" + name + "</label>");
        actionEl = jQuery("<input class='checkbox' type='checkbox' value='" + g + "' " + checked + "/>");
        actionEl.change(function(e) {
          e.preventDefault();
          return viewController.select(this.value, this.checked);
        });
        labEl.append(actionEl);
        mapEl.append(labEl);
        el.append(mapEl);
      } else {
        return false;
      }
      true;
    }
  };

  MapView.prototype.updateCSS = function(gset, genomes) {
    var mapEl;
    mapEl = jQuery("#" + this.elID);
    if (!((mapEl != null) && mapEl.length)) {
      throw new SuperphyError(" DOM element for map view " + this.elID + " not found. Cannot call MapView method updateCSS().");
    }
    return true;
  };

  MapView.prototype.select = function(genome, isSelected) {
    var descriptor, itemEl;
    itemEl = null;
    if (this.style === 'select') {
      descriptor = "li input[value='" + genome + "']";
      itemEl = jQuery(descriptor);
    } else {
      return false;
    }
    if (!((itemEl != null) && itemEl.length)) {
      throw new SuperphyError(" Map element for genome " + genome + " not found in MapView " + this.elID);
      return false;
    }
    itemEl.prop('checked', isSelected);
    return true;
  };

  MapView.prototype.dump = function(genomes) {};

  MapView.prototype.conscriptCartographger = function() {
    var cartographer;
    cartographer = new DotCartographer(jQuery(this.parentElem));
    return cartographer.cartograPhy();
  };

  return MapView;

})(ViewTemplate);

true;

Cartographer = (function() {
  function Cartographer(cartographDiv, cartograhOpt) {
    this.cartographDiv = cartographDiv;
    this.cartograhOpt = cartograhOpt;
  }

  Cartographer.prototype.map = null;

  Cartographer.prototype.latLng = null;

  Cartographer.prototype.splitLayout = '<div> <form class="form"> <fieldset> <div> <div class="input-group"> <input type="text" class="form-control map-search-location" placeholder="Enter a search location"> <span class="input-group-btn"> <button class="btn btn-default map-search-button" type="button"><span class="fa fa-search"></span></button> </span> </div> </div> </div> </fieldset> </form> <div class="map-canvas" style="height:200px;width:200px"></div> </div>';

  Cartographer.prototype.cartograPhy = function() {
    var cartograhOpt;
    jQuery(this.cartographDiv).prepend(this.splitLayout);
    if (this.map != null) {
      this.map = null;
    }
    cartograhOpt = {
      center: new google.maps.LatLng(-0.000, 0.000),
      zoom: 1,
      streetViewControl: false,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    this.map = new google.maps.Map(jQuery(this.cartographDiv).find('.map-canvas')[0], cartograhOpt);
    jQuery('.map-search-button').bind('click', {
      context: this
    }, this.pinPoint);
    return true;
  };

  Cartographer.prototype.reCartograPhy = function() {
    return true;
  };

  Cartographer.prototype.pinPoint = function(e) {
    var geocoder, queryLocation, self;
    e.preventDefault();
    self = e.data.context;
    geocoder = new google.maps.Geocoder();
    queryLocation = jQuery('.map-search-location').val();
    geocoder.geocode({
      'address': queryLocation
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        self.latLng = results[0].geometry.location;
        self.map.setCenter(results[0].geometry.location);
        return self.map.fitBounds(results[0].geometry.viewport);
      } else {
        return alert("Location " + address + " could not be found. Please enter a proper location");
      }
    });
    return true;
  };

  return Cartographer;

})();

DotCartographer = (function(_super) {
  __extends(DotCartographer, _super);

  function DotCartographer(dotCartographDiv, dotCartograhOpt) {
    this.dotCartographDiv = dotCartographDiv;
    this.dotCartograhOpt = dotCartograhOpt;
    DotCartographer.__super__.constructor.call(this, this.dotCartographDiv, this.dotCartograhOpt);
  }

  DotCartographer.prototype.marker = null;

  DotCartographer.prototype.cartograPhy = function() {
    DotCartographer.__super__.cartograPhy.apply(this, arguments);
    google.maps.event.addListener(this.map, 'click', function(event) {
      return DotCartographer.prototype.plantFlag(event.latLng, this);
    });
    return true;
  };

  DotCartographer.prototype.reCartograPhy = function() {
    return DotCartographer.__super__.reCartograPhy.apply(this, arguments);
  };

  DotCartographer.prototype.pinPoint = function(e) {
    var self;
    DotCartographer.__super__.pinPoint.call(this, e);
    self = e.data.context;
    DotCartographer.prototype.plantFlag(self.latLng, self.map);
    return true;
  };

  DotCartographer.prototype.plantFlag = function(location, map) {
    if (this.marker != null) {
      this.marker.setMap(null);
    }
    this.marker = new google.maps.Marker({
      position: location,
      map: map
    });
    this.marker.setTitle(this.marker.getPosition().toString());
    map.panTo(this.marker.getPosition());
    return true;
  };

  return DotCartographer;

})(Cartographer);
