// Generated by CoffeeScript 1.7.1

/*

 File: superphy_map.coffee
 Desc: Objects & functions for managing geospatial views in Superphy
 Author: Akiff Manji akiff.manji@gmail.com
 Date: May 6, 2014
 */
var Cartographer, CartographerOverlay, DotCartographer, InfoSatelliteCartographer, MapView, SatelliteCartographer,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

MapView = (function(_super) {
  __extends(MapView, _super);

  function MapView(parentElem, style, elNum, mapArgs) {
    this.parentElem = parentElem;
    this.style = style;
    this.elNum = elNum;
    MapView.__super__.constructor.call(this, this.parentElem, this.style, this.elNum);
  }

  MapView.prototype.type = 'map';

  MapView.prototype.elName = 'genome_map';

  MapView.prototype.cartographer = null;

  MapView.prototype.mapView = true;

  MapView.prototype.update = function(genomes) {
    var ft, i, mapElem, pubVis, pvtVis, t1, t2, _i, _j, _len, _len1, _ref, _ref1;
    mapElem = jQuery("#" + this.elID);
    if (mapElem.length) {
      mapElem.empty();
    } else {
      mapElem = jQuery("<ul id='" + this.elID + "' />");
      jQuery(this.parentElem).find('.map-manifest').append(mapElem);
    }
    pubVis = [];
    pvtVis = [];
    if (this.cartographer == null) {
      pubVis = genomes.pubVisible;
      pvtVis = genomes.pvtVisible;
    } else if ((this.cartographer != null) && this.cartographer.visibleStrains) {
      _ref = this.cartographer.visibileStrainLocations.pubVisible;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        if (__indexOf.call(genomes.pubVisible, i) >= 0) {
          pubVis.push(i);
        }
      }
      _ref1 = this.cartographer.visibileStrainLocations.pvtVisible;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        i = _ref1[_j];
        if (__indexOf.call(genomes.pvtVisible, i) >= 0) {
          pvtVis.push(i);
        }
      }
    }
    t1 = new Date();
    this._appendGenomes(mapElem, pubVis, genomes.public_genomes, this.style, false);
    this._appendGenomes(mapElem, pvtVis, genomes.private_genomes, this.style, true);
    t2 = new Date();
    ft = t2 - t1;
    console.log('MapView update elapsed time: ' + ft);
    return true;
  };

  MapView.prototype._appendGenomes = function(el, visibleG, genomes, style, priv) {
    var actionEl, checked, cls, g, labEl, mapEl, name, thiscls, _i, _len;
    cls = this.cssClass();
    if (priv && visibleG.length) {
      el.append("<li class='genome_list_spacer'>---- USER-SUBMITTED GENOMES ----</li>");
    }
    for (_i = 0, _len = visibleG.length; _i < _len; _i++) {
      g = visibleG[_i];
      thiscls = cls;
      if (genomes[g].cssClass != null) {
        thiscls = cls + ' ' + genomes[g].cssClass;
      }
      name = genomes[g].htmlname;
      if (style = 'redirect') {
        mapEl = jQuery("<li class='" + thiscls + "'>" + name + "</li>");
        actionEl = jQuery("<a href='#' data-genome='" + g + "'> <span class='fa fa-search'></span>info</a>");
        actionEl.click(function(e) {
          var gid;
          e.preventDefault();
          gid = this.dataset.genome;
          return viewController.select(gid, true);
        });
        mapEl.append(actionEl);
        el.append(mapEl);
      } else if (style === 'select') {
        checked = '';
        if (genomes[g].isSelected) {
          checked = 'checked';
        }
        mapEl = jQuery("<li class='" + thiscls + "'></li>");
        labEl = jQuery("<label class='checkbox'>" + name + "</label>");
        actionEl = jQuery("<input class='checkbox' type='checkbox' value='" + g + "' " + checked + "/>");
        actionEl.change(function(e) {
          e.preventDefault();
          return viewController.select(this.value, this.checked);
        });
        labEl.append(actionEl);
        mapEl.append(labEl);
        el.append(mapEl);
      } else {
        return false;
      }
      true;
    }
  };

  MapView.prototype.updateCSS = function(gset, genomes) {
    var mapEl;
    mapEl = jQuery("#" + this.elID);
    if (!((mapEl != null) && mapEl.length)) {
      throw new SuperphyError(" DOM element for map view " + this.elID + " not found. Cannot call MapView method updateCSS().");
    }
    return true;
  };

  MapView.prototype.select = function(genome, isSelected) {
    var descriptor, itemEl;
    itemEl = null;
    if (this.style === 'select') {
      descriptor = "li input[value='" + genome + "']";
      itemEl = jQuery(descriptor);
    } else {
      return false;
    }
    if (!((itemEl != null) && itemEl.length)) {
      throw new SuperphyError(" Map element for genome " + genome + " not found in MapView " + this.elID);
      return false;
    }
    itemEl.prop('checked', isSelected);
    return true;
  };

  MapView.prototype.dump = function(genomes) {};

  MapView.prototype.conscriptCartographger = function() {
    this.cartographer = new SatelliteCartographer(jQuery(this.parentElem), null, window.selectedGenome);
    return this.cartographer.cartograPhy();
  };

  true;

  return MapView;

})(ViewTemplate);


/*
  CLASS Cartographer

  Handles map drawing and location searching
 */

Cartographer = (function() {
  function Cartographer(cartographDiv, cartograhOpt) {
    this.cartographDiv = cartographDiv;
    this.cartograhOpt = cartograhOpt;
  }

  Cartographer.prototype.visibleStrains = false;

  Cartographer.prototype.map = null;

  Cartographer.prototype.splitLayout = '<div class="col-md-6 map-search-div"> <table class="table map-search-table"> <tr> <td> <form class="form"> <fieldset> <div> <div class="input-group"> <input type="text" class="form-control map-search-location" placeholder="Enter a search location"> <span class="input-group-btn"> <button class="btn btn-default map-search-button" type="button"><span class="fa fa-search"></span></button> </span> </div> </div> </div> </fieldset> </form> </td> </tr> <tr> <td> <div class="map-canvas"></div> </td> </tr> </table> </div>';

  Cartographer.prototype.cartograPhy = function() {
    var cartograhOpt;
    jQuery(this.cartographDiv).prepend(this.splitLayout);
    if (this.map != null) {
      this.map = null;
    }
    cartograhOpt = {
      center: new google.maps.LatLng(-0.000, 0.000),
      zoom: 1,
      streetViewControl: false,
      mapTypeId: google.maps.MapTypeId.ROADMAP
    };
    this.map = new google.maps.Map(jQuery(this.cartographDiv).find('.map-canvas')[0], cartograhOpt);
    jQuery('.map-search-button').bind('click', {
      context: this
    }, this.pinPoint);
    return true;
  };

  Cartographer.prototype.pinPoint = function(e) {
    var geocoder, queryLocation, self;
    e.preventDefault();
    self = e.data.context;
    geocoder = new google.maps.Geocoder();
    queryLocation = jQuery('.map-search-location').val();
    geocoder.geocode({
      'address': queryLocation
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        self.map.setCenter(results[0].geometry.location);
        return self.map.fitBounds(results[0].geometry.viewport);
      } else {
        return alert("Location " + queryLocation + " could not be found. Please enter a proper location");
      }
    });
    return true;
  };

  return Cartographer;

})();


/*
  CLASS DotCartographer

  Handles map drawing and location searching
  Allows for pinpointing locations
 */

DotCartographer = (function(_super) {
  __extends(DotCartographer, _super);

  function DotCartographer(dotCartographDiv, dotCartograhOpt) {
    this.dotCartographDiv = dotCartographDiv;
    this.dotCartograhOpt = dotCartograhOpt;
    DotCartographer.__super__.constructor.call(this, this.dotCartographDiv, this.dotCartograhOpt);
  }

  DotCartographer.prototype.latLng = null;

  DotCartographer.prototype.marker = null;

  DotCartographer.prototype.cartograPhy = function() {
    DotCartographer.__super__.cartograPhy.apply(this, arguments);
    google.maps.event.addListener(this.map, 'click', function(event) {
      return DotCartographer.prototype.plantFlag(event.latLng, this);
    });
    return true;
  };

  DotCartographer.prototype.pinPoint = function(e) {
    var geocoder, queryLocation, self;
    e.preventDefault();
    self = e.data.context;
    geocoder = new google.maps.Geocoder();
    queryLocation = jQuery('.map-search-location').val();
    geocoder.geocode({
      'address': queryLocation
    }, function(results, status) {
      if (status === google.maps.GeocoderStatus.OK) {
        self.latLng = results[0].geometry.location;
        self.map.setCenter(results[0].geometry.location);
        self.map.fitBounds(results[0].geometry.viewport);
        return DotCartographer.prototype.plantFlag(self.latLng, self.map);
      } else {
        return alert("Location " + queryLocation + " could not be found. Please enter a proper location");
      }
    });
    return true;
  };

  DotCartographer.prototype.plantFlag = function(location, map) {
    if (this.marker != null) {
      this.marker.setMap(null);
    }
    this.marker = new google.maps.Marker({
      position: location,
      map: map
    });
    this.marker.setTitle(this.marker.getPosition().toString());
    map.panTo(this.marker.getPosition());
    return true;
  };

  return DotCartographer;

})(Cartographer);


/*
  CLASS SatelliteCartographer

  Handles map drawing and location searching
  Displays multiple markers on map
  Handles marker clustering
  Displays list of genomes 
  Alters genome list when map viewport changes
 */

SatelliteCartographer = (function(_super) {
  __extends(SatelliteCartographer, _super);

  function SatelliteCartographer(satelliteCartographDiv, satelliteCartograhOpt) {
    this.satelliteCartographDiv = satelliteCartographDiv;
    this.satelliteCartograhOpt = satelliteCartograhOpt;
    SatelliteCartographer.__super__.constructor.call(this, this.satelliteCartographDiv, this.satelliteCartograhOpt);
  }

  SatelliteCartographer.prototype.visibleStrains = true;

  SatelliteCartographer.prototype.clusterList = [];

  SatelliteCartographer.prototype.visibileStrainLocations = {};

  SatelliteCartographer.prototype.markerClusterer = null;

  SatelliteCartographer.prototype.mapViewIndex = null;

  SatelliteCartographer.prototype.cartograPhy = function() {
    var index;
    jQuery(this.satelliteCartographDiv).prepend('<div class="col-md-5 map-manifest"></div>');
    SatelliteCartographer.__super__.cartograPhy.apply(this, arguments);
    SatelliteCartographer.prototype.updateMarkerLists(viewController.genomeController, this.map);
    SatelliteCartographer.prototype.markerCluster(this.map);
    index = SatelliteCartographer.prototype.findMapViewIndex(viewController.views);
    SatelliteCartographer.prototype.mapViewIndex = index;
    jQuery(this.satelliteCartographDiv).data("viewsIndex", index);
    google.maps.event.addListener(this.map, 'zoom_changed', function() {
      return SatelliteCartographer.prototype.markerClusterer.clearMarkers();
    });
    google.maps.event.addListener(this.map, 'bounds_changed', function() {
      return SatelliteCartographer.prototype.markerClusterer.clearMarkers();
    });
    google.maps.event.addListener(this.map, 'resize', function() {
      return SatelliteCartographer.prototype.markerClusterer.clearMarkers();
    });
    google.maps.event.addListener(this.map, 'idle', function() {
      SatelliteCartographer.prototype.updateMarkerLists(viewController.genomeController, this);
      viewController.getView(SatelliteCartographer.prototype.mapViewIndex).update(viewController.genomeController);
      return SatelliteCartographer.prototype.markerClusterer.addMarkers(SatelliteCartographer.prototype.clusterList);
    });
    return true;
  };

  SatelliteCartographer.prototype.updateMarkerLists = function(genomes, map) {
    var circleIcon, private_genome, pubGenomeId, pubMarker, pubMarkerObj, public_genome, pvtGenomeId, pvtMarker, pvtMarkerObj, _ref, _ref1;
    this.clusterList = [];
    this.visibileStrainLocations.pubVisible = [];
    this.visibileStrainLocations.pvtVisible = [];
    _ref = genomes.public_genomes;
    for (pubGenomeId in _ref) {
      public_genome = _ref[pubGenomeId];
      if ((public_genome.isolation_location != null) && public_genome.isolation_location !== "") {
        pubMarkerObj = SatelliteCartographer.prototype.parseLocation(public_genome);
        circleIcon = {
          path: google.maps.SymbolPath.CIRCLE,
          fillColor: '#FF0000',
          fillOpacity: 0.8,
          scale: 5,
          strokeColor: '#FF0000',
          strokeWeight: 1
        };
        pubMarker = new google.maps.Marker({
          map: map,
          icon: circleIcon,
          position: pubMarkerObj['centerLatLng'],
          title: public_genome.uniquename,
          feature_id: pubGenomeId,
          uniquename: public_genome.uniquename,
          location: pubMarkerObj['locationName']
        });
        this.clusterList.push(pubMarker);
        if (map.getBounds() !== void 0 && map.getBounds().contains(pubMarker.getPosition())) {
          this.visibileStrainLocations.pubVisible.push(pubGenomeId);
        }
      }
    }
    _ref1 = genomes.private_genomes;
    for (pvtGenomeId in _ref1) {
      private_genome = _ref1[pvtGenomeId];
      if ((private_genome.isolation_location != null) && private_genome.isolation_location !== "") {
        pvtMarkerObj = SatelliteCartographer.prototype.parseLocation(private_genome);
        circleIcon = {
          path: google.maps.SymbolPath.CIRCLE,
          fillColor: '#000000',
          fillOpacity: 0.8,
          scale: 5,
          strokeColor: '#FF0000',
          strokeWeight: 1
        };
        pvtMarker = new google.maps.Marker({
          map: map,
          position: pvtMarkerObj['centerLatLng'],
          title: private_genome.uniquename,
          feature_id: pvtGenomeId,
          uniquename: private_genome.uniquename,
          location: pvtMarkerObj['locationName']
        });
        this.clusterList.push(pvtMarker);
        if (map.getBounds() !== void 0 && map.getBounds().contains(pubMarker.getPosition())) {
          this.visibileStrainLocations.pvtVisible.push(pvtGenomeId);
        }
      }
    }
    return true;
  };

  SatelliteCartographer.prototype.markerCluster = function(map) {
    var mcOptions;
    mcOptions = {
      gridSize: 50,
      maxZoom: 15
    };
    this.markerClusterer = new MarkerClusterer(map, this.clusterList, mcOptions);
    return true;
  };

  SatelliteCartographer.prototype.findMapViewIndex = function(views) {
    var index, v, _i, _len;
    for (index = _i = 0, _len = views.length; _i < _len; index = ++_i) {
      v = views[index];
      if (v.mapView != null) {
        return index;
      }
    }
    return null;
  };

  SatelliteCartographer.prototype.resetMap = function() {
    var c, x;
    SatelliteCartographer.prototype.updateMarkerLists(viewController.genomeController, this.map);
    x = this.map.getZoom();
    c = this.map.getCenter();
    google.maps.event.trigger(this.map, 'resize');
    this.map.setZoom(x);
    this.map.setCenter(c);
    return SatelliteCartographer.prototype.markerClusterer.addMarkers(SatelliteCartographer.prototype.clusterList);
  };

  SatelliteCartographer.prototype.parseLocation = function(genome) {
    var centerLatLng, locationCenter, locationCenterLat, locationCenterLng, locationCoordinates, locationName, locationViewPortNE, locationViewPortNELat, locationViewPortNELng, locationViewPortSW, locationViewPortSWLat, locationViewPortSWLng, markerBounds, markerObj, neLatLng, swLatLng;
    locationName = genome.isolation_location[0].match(/<location>[\w\d\W\D]*<\/location>/)[0];
    locationName = locationName.replace(/<location>/, '').replace(/<\/location>/, '').replace(/<[\/]+[\w\d]*>/g, '').replace(/<[\w\d]*>/g, ', ').replace(/, /, '');
    locationCoordinates = genome.isolation_location[0].match(/<coordinates>[\w\d\W\D]*<\/coordinates>/)[0];
    locationCenter = locationCoordinates.match(/<center>[\w\d\W\D]*<\/center>/)[0];
    locationCenterLat = locationCenter.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
    locationCenterLat = locationCenterLat.replace(/<lat>/, '').replace(/<\/lat>/, '');
    locationCenterLng = locationCenter.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
    locationCenterLng = locationCenterLng.replace(/<lng>/, '').replace(/<\/lng>/, '');
    locationViewPortSW = locationCoordinates.match(/<southwest>[\w\d\W\D]*<\/southwest>/)[0];
    locationViewPortSWLat = locationViewPortSW.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
    locationViewPortSWLat = locationViewPortSWLat.replace(/<lat>/, '').replace(/<\/lat>/, '');
    locationViewPortSWLng = locationViewPortSW.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
    locationViewPortSWLng = locationViewPortSWLng.replace(/<lng>/, '').replace(/<\/lng>/, '');
    locationViewPortNE = locationCoordinates.match(/<northeast>[\w\d\W\D]*<\/northeast>/)[0];
    locationViewPortNELat = locationViewPortNE.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
    locationViewPortNELat = locationViewPortNELat.replace(/<lat>/, '').replace(/<\/lat>/, '');
    locationViewPortNELng = locationViewPortNE.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
    locationViewPortNELng = locationViewPortNELng.replace(/<lng>/, '').replace(/<\/lng>/, '');
    centerLatLng = new google.maps.LatLng(locationCenterLat, locationCenterLng);
    swLatLng = new google.maps.LatLng(locationViewPortSWLat, locationViewPortSWLng);
    neLatLng = new google.maps.LatLng(locationViewPortNELat, locationViewPortNELng);
    markerBounds = new google.maps.LatLngBounds(swLatLng, neLatLng);
    markerObj = {};
    markerObj['locationName'] = locationName;
    markerObj['centerLatLng'] = centerLatLng;
    markerObj['markerBounds'] = markerBounds;
    return markerObj;
  };

  return SatelliteCartographer;

})(Cartographer);


/*
  CLASS InfoSatelliteCartographer

  Handles map drawing and location searching
  Displays multiple markers on map
  Handles marker clustering
  Displays list of genomes 
  Alters genome list when map viewport changes
  Highlights selected genome on map from search query
 */

InfoSatelliteCartographer = (function(_super) {
  __extends(InfoSatelliteCartographer, _super);

  function InfoSatelliteCartographer(infoSatelliteCartographDiv, infoSatelliteCartograhOpt, infoSelectedGenome) {
    this.infoSatelliteCartographDiv = infoSatelliteCartographDiv;
    this.infoSatelliteCartograhOpt = infoSatelliteCartograhOpt;
    this.infoSelectedGenome = infoSelectedGenome;
    InfoSatelliteCartographer.__super__.constructor.call(this, this.infoSatelliteCartographDiv, this.infoSatelliteCartograhOpt, this.infoSelectedGenome);
  }

  InfoSatelliteCartographer.prototype.selectedGenomeLocation = null;

  InfoSatelliteCartographer.prototype.cartograPhy = function() {
    InfoSatelliteCartographer.__super__.cartograPhy.apply(this, arguments);
    this.selectedGenomeLocation = this.parseLocation(this.infoSelectedGenome);
    return this.showSelectedGenome(this.selectedGenomeLocation, this.map);
  };

  InfoSatelliteCartographer.prototype.showSelectedGenome = function(location, map) {
    var markerLatLng, maxZndex, overlay, zInd;
    if (location == null) {
      throw new SuperphyError('Location cannot be determined or location is undefined (not specified)!');
      return 0;
    }
    maxZndex = google.maps.Marker.MAX_ZINDEX;
    zInd = maxZndex + 1;
    markerLatLng = new google.maps.LatLng(location.centerLatLng);
    return overlay = new CartographerOverlay(map, location.centerLatLng, location.locationName);
  };

  return InfoSatelliteCartographer;

})(SatelliteCartographer);

CartographerOverlay = (function() {
  function CartographerOverlay(map, latLng, title) {
    this.map = map;
    this.latLng = latLng;
    this.title = title;
    this.setMap(this.map);
    this.div = null;
  }

  CartographerOverlay.prototype = new google.maps.OverlayView();

  CartographerOverlay.prototype.onAdd = function() {
    var div, img, panes;
    div = document.createElement('div');
    div.id = "selectedGenome";
    div.style.borderStyle = 'none';
    div.style.borderWidth = '0px';
    div.style.position = 'absolute';
    div.style.width = '22px';
    div.style.height = '40px';
    div.style.cursor = 'pointer';
    img = document.createElement('img');
    img.src = '/App/Pictures/marker_icon_green.png';
    img.style.width = '100%';
    img.style.height = '100%';
    img.style.position = 'absolute';
    img.id = "selectedGenomeMarker";
    img.title = this.title;
    div.appendChild(img);
    this.div = div;
    panes = this.getPanes();
    return panes.floatPane.appendChild(div);
  };

  CartographerOverlay.prototype.onRemove = function() {
    this.div.parentNode.removeChild(this.div);
    return this.div = null;
  };

  CartographerOverlay.prototype.draw = function() {
    var div, location, overlayProjection;
    overlayProjection = this.getProjection();
    location = overlayProjection.fromLatLngToDivPixel(this.latLng);
    div = this.div;
    div.style.left = (location.x - 11) + 'px';
    return div.style.top = (location.y - 40) + 'px';
  };

  return CartographerOverlay;

})();
