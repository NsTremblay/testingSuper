<script type="text/javascript" src="/App/Styling/js/markerclusterer.js"></script>
<script>
var public_genomes = <TMPL_VAR public_genomes>;
var public_location_genomes = {};
var private_genomes = <TMPL_VAR private_genomes>;
var private_location_genomes = {};
visableData = ['name'];
</script>

<div style="margin:10px">
	<p style="margin-bottom: 40px">
		Select strains from the map. As you zoom in and out and pan accross the map the list of markers on the right will change.
	</p>
	<div style="padding: 0 10px 0 10px">
		<hr/>
	</div>
</div>

<table>
	<tbody>
		<tr>
			<td>
			</td>
			<td>
				<div class="span4">
					<button type="button" class="btn btn-mini btn-info" data-toggle="collapse" data-target="#map-meta-display">
						<i class=" icon-eye-open icon-white"></i>
						<span class="caret"></span>
					</button>
					<div id="map-meta-display" class="collapse out" style="border-style:solid; border-width:1px; border-color:#d3d3d3; margin:10px;">
						<div style="padding: 10px">Change meta-data displayed in map:</div>
						<form class="form-horizontal" style="padding:0px 5px 0 20px;">
							<fieldset>		    	
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="name"> Name 
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="accession"> Accession # 
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="strain"> Strain
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="serotype"> Serotype
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="isolation_host"> Isolation Host
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="isolation_source"> Isolation Source 
								</label>
								<label>
									<input class="map-meta" type="checkbox" name="map-meta-option" value="isolation_date"> Isolation Date
								</label>														   			   						   
							</fieldset>
							<button id="update-map-meta" class="btn btn-small" style="margin:10px 0 0 10px;">Update</button>
						</form>
					</div>
				</div>
			</td>
		</tr>
		<tr colspan="2">
			<td>
				<div class="span7">			
					<form class="form-inline">
						<fieldset>
							<input id="advancedMapLocation" class="span6" type="text" placeholder="Search for a location">
							<button type="button" class="btn" onclick="codeAdvancedMapAddress()">Search</button>
						</fieldset>
					</form>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<div class="span7" id="advanced-map-canvas" style="height:300px"></div>
			</td>
			<td>
				<div class="span4" style="border:solid;border-width:1px;border-color:#d3d3d3;height:300px;overflow:auto">
					<div style="padding:10px">
						<span class="help-block"></span>
						<ul id="advancedMapStrainList" style="padding:0px;margin:0px">
							<li style="list-style:none">
							</li>
						</ul>
					</div>
				</div>
			</td>
		</tr>
	</tbody>
</table>

<script type="text/javascript">

//This disables the enter key from submitting the form to an empty url
$(function(){
	$("#advancedMapLocation").keypress(function(e){
		var k=e.keyCode || e.which;
		if(k==13){
			e.preventDefault();
		}
	});
});

var advancedMap;
//Cluster list array is required by MarkerClusterer to cluster markers together on map (i.e It does not accept an object)
var clusterList = [];
//advancedMarkers object for all markers visible or not
var advancedMarkers = {};
//visibleMarkers list of markers currently in viewport
var visibleMarkers = {};
var geocoder;

function initialize() {
	//Initializes all globals then loads map

	//Need to locations alphanumerically
	var sortedPublicLocations = [];

	$.each( public_genomes, function(feature_id, feature_obj) {
		if (feature_obj.isolation_location && feature_obj.isolation_location != "") {
			public_location_genomes[feature_id] = feature_obj;
			var newMarkerObj = parseLocation(feature_obj);
			var advancedMarker = new google.maps.Marker({
				map: advancedMap,
				position: newMarkerObj['centerLatLng'],
				title: newMarkerObj['locationName'],
				feature_id: feature_id,
				uniquename: feature_obj.uniquename
			});
			sortedPublicLocations.push(advancedMarker);
		}
		else{
		}
	});	

	sortedPublicLocations.sort(function(a,b){
		if(a.title < b.title) return -1;
		if(a.title > b.title) return 1;
		return 0;
	});

	//Create final marker objects and lists sorted alphanumerically
	for (var i = 0; i < sortedPublicLocations.length; i++) {
		var advancedMarker = sortedPublicLocations[i];
		advancedMarkers[advancedMarker.feature_id] = advancedMarker;
		clusterList.push(advancedMarker);
	};

	//Set initial visibleMarkers to all markers in view
	visibleMarkers = advancedMarkers;

	// Populate forms
	updateMapMeta('advancedLocationInit');

	reLoadMap();

}

function reLoadMap() {

	geocoder = new google.maps.Geocoder();
	var mapOptions = {
		center: new google.maps.LatLng(-0.000, 0.000),
		zoom: 1,
		smaptViewControl: false,
		mapTypeId: google.maps.MapTypeId.ROADMAP
	};

	advancedMap = new google.maps.Map(document.getElementById("advanced-map-canvas"),
		mapOptions);

	var mcOptions = {gridSize: 50, maxZoom: 15};
	var mc = new MarkerClusterer(advancedMap, clusterList, mcOptions)
	updateMapMeta('advancedLocationList');

	google.maps.event.addListener(advancedMap, 'bounds_changed', function() {
		visibleMarkers = {};

		$.each( advancedMarkers, function(feature_id , marker) {
			if(advancedMap.getBounds().contains(marker.getPosition())){
				visibleMarkers[feature_id] = marker;
			}
			else{
			}
		});
		updateSelectionList();
	});
}

function codeAdvancedMapAddress() {
	var address = document.getElementById('advancedMapLocation').value;
	geocoder.geocode( { 'address': address}, function(results, status) {
		if (status == google.maps.GeocoderStatus.OK) {
			advancedMap.setCenter(results[0].geometry.location);
			advancedMap.fitBounds(results[0].geometry.viewport);
		}
		else {
			alert('Location ' + document.getElementById('location').value + ' could not be found. Please enter a proper location');
		}
	});
}

function updateSelectionList() {
	updateMapMeta('advancedLocationList', visableData);
}

function parseLocation(location_obj) {
	//Need to take in a location from the public or private lists and parses out the locations
	var markerObj = {}

	//Parses the location name for the marker title
	var locationName = location_obj.isolation_location[0].match(/<location>[\w\d\W\D]*<\/location>/)[0];
	locationName = locationName.replace(/<location>/, '');
	locationName = locationName.replace(/<\/location>/, '');
	locationName = locationName.replace(/<[\/]+[\w\d]*>/g, '');
	locationName = locationName.replace(/<[\w\d]*>/g, ', ');
	locationName = locationName.replace(/, /, '');

	var locationCoordinates = location_obj.isolation_location[0].match(/<coordinates>[\w\d\W\D]*<\/coordinates>/)[0];

	//Parses out the center LatLong point
	var locationCenter = locationCoordinates.match(/<center>[\w\d\W\D]*<\/center>/)[0];
	var locationCenterLat = locationCenter.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
	locationCenterLat = locationCenterLat.replace(/<lat>/, '');
	locationCenterLat = locationCenterLat.replace(/<\/lat>/, '');
	var locationCenterLng = locationCenter.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
	locationCenterLng = locationCenterLng.replace(/<lng>/, '');
	locationCenterLng = locationCenterLng.replace(/<\/lng>/, '');

	//Parses out boundary LatLongs
	var locationViewportSW = locationCoordinates.match(/<southwest>[\w\d\W\D]*<\/southwest>/)[0];
	var locationViewportSWLat = locationViewportSW.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
	var locationViewportSWLng = locationViewportSW.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
	locationViewportSWLat = locationViewportSWLat.replace(/<lat>/, '');
	locationViewportSWLat = locationViewportSWLat.replace(/<\/lat>/, '');
	locationViewportSWLng = locationViewportSWLng.replace(/<lng>/, '');
	locationViewportSWLng = locationViewportSWLng.replace(/<\/lng>/, '');

	var locationViewportNE = locationCoordinates.match(/<northeast>[\w\d\W\D]*<\/northeast>/)[0];
	var locationViewportNELat = locationViewportNE.match(/<lat>[\w\d\W\D]*<\/lat>/)[0];
	var locationViewportNELng = locationViewportNE.match(/<lng>[\w\d\W\D]*<\/lng>/)[0];
	locationViewportNELat = locationViewportNELat.replace(/<lat>/, '');
	locationViewportNELat = locationViewportNELat.replace(/<\/lat>/, '');
	locationViewportNELng = locationViewportNELng.replace(/<lng>/, '');
	locationViewportNELng = locationViewportNELng.replace(/<\/lng>/, '');

	var centerLatLng = new google.maps.LatLng(locationCenterLat, locationCenterLng);
	var swLatLng = new google.maps.LatLng(locationViewportSWLat, locationViewportSWLng);
	var neLatLng = new google.maps.LatLng(locationViewportNELat, locationViewportNELng);
	var markerBounds = new google.maps.LatLngBounds(swLatLng, neLatLng);

	markerObj['locationName'] = locationName;
	markerObj['centerLatLng'] = centerLatLng;
	markerObj['markerBounds'] = markerBounds;

	return markerObj;
}

function updateMapMeta(tab, visibleData) {
	if(typeof visibleData === 'undefined' || visibleData.length == 0) {
		visibleData = ['name'];
	}
	if(tab == 'advancedLocationList' || tab == 'advancedLocationInit') {
		//This needs to be changed to account for public and private data
		var dropDown = $('#advancedMapStrainList');
		dropDown.empty();
		
		$.each( visibleMarkers, function(feature_id, feature_obj) {
			var locationTitle = advancedMarkers[feature_id].title;
			var lab = metaLabel(public_location_genomes[feature_id], visibleData);
			
			dropDown.append(
				'<li style="list-style-type:none">'+
				'<label class="checkbox" for="'+feature_id+'"><input id="'+feature_id+'" class="checkbox" type="checkbox" value="'+feature_id+'" name="'+locationTitle+" - "+lab+'" onclick="selectCheckbox(this)"/>'+locationTitle+' - '+lab+'</label>'+								
				'</li>'
				);
		});	
	}
} 

// Create labels for a genome with required meta data
function metaLabel(feature, vdata) {
	var label = [];
	if(vdata.indexOf('name') != -1) {
		label.push(feature.uniquename);
	}
	
	if(vdata.indexOf('accession') != -1) {
		if(typeof feature.primary_dbxref !== 'undefined') {
			label.push(feature.primary_dbxref);
		} else {
			label.push('NA');
		}
	}
	
	var metaDataTypes = ['strain', 'serotype', 'isolation_host', 'isolation_source', 'isolation_date'];
	for(var i=0; i<metaDataTypes.length; i++) {
		var x = metaDataTypes[i];
		
		if(vdata.indexOf(x) != -1) {
			
			if(typeof feature[x] !== 'undefined') {
				var sublabel = [];
				
				for(var j=0; j<feature[x].length; j++) {
					sublabel.push(feature[x][j]);
				}
				
				var sublabel_string = sublabel.join();
				label.push(sublabel_string);
			} else {
				label.push('NA');
			}
		}
	}
	return label.join('|');
}

google.maps.event.addDomListener(window, 'load', initialize);

$('a[href="#map_search_tab"]').click( function(){
	setTimeout("reLoadMap()", 0);
	//initializeMap(); 
});

$('#update-map-meta').click(function(event) {
	event.preventDefault();
	visableData = [];
	$('input[name="map-meta-option"]:checked').each( function(i, e) { visableData.push( $( e ).val() ); });
	updateMapMeta('advancedLocationList', visableData);
	return false;
});


function selectCheckbox(box) {
	$("#dialog-genome-select")
	.text('Would you like to retrieve genome information for the selected genome: '+box.name+'?')
	.data('genome', box.value)
	.dialog('open', this.box);
}

$(function() {
	// Displayed when user clicks genome
	$( "#dialog-genome-select" ).dialog({
		autoOpen: false,
		resizable: false,
		height:180,
		modal: true,
		buttons: {
			"Submit": function() {
				var form = $('<form action="/strain_info/" method="post">' +
					'<input type="text" name="genome" value="' + $( this ).data('genome') + '" />' +
					'</form>');
				$( 'body' ).append(form);
				$( form ).submit();
			},
			Cancel: function() {
				$('#advancedMapStrainList').find('input[type=checkbox]:checked').removeAttr('checked');
				$( this ).dialog( "close" );
			}
		}
	});
});

</script>